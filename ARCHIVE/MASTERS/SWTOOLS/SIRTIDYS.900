
*8192
*17

((SIRTIDY - SIR PRETTY PRINTER - ANDREW HERBERT - 01/02/2015)

[ SIRTDY CHIPE CHIPL CHIPF CHOPE CHOPL CHOPC CHOPF ]

(8)       8     SIRTDY

[ BUFFER BUFP INCOL MAXCOL OUTCOL TRIGST TSTOPS ]

BUFP
BUFFER	  >121		  (BUFP is BUFFER[0])
INCOL     >1              (Current input column number)
MAXCOL    +80
OUTCOL    >1              (Current output column number)
TRIGST    +8
TSTOPS    +11 +17 +27

(CHTABL: Character decoding)

[ CHTABL BLANK DIGIT LOWER UPPER LETTER ALPHAN NEWLIN WHITE RDBRA SEPARA ]

DIGIT     &010000
LOWER     &020000
UPPER     &040000
LETTER    &060000
ALPHAN    &070000
BLANK     &100000
NEWLIN    &200000
WHITE     &300000
RDBRA     &400000
SEPARA    &700000

(Action codes:
         1       Halt
         2       Space, Tab
         3       Newline
         4       0-9
         5       A-Za-z
         6       /
  	 7	  + - & : 
        10       (
        11       *
        12       [
        13       >
        14       <
        15       ^
        16       $
        17       percent
        20       \
	21	 ')

CHTABL    &000000         (0)
          &000000         (1)
          &000000         (2)
          &000013         (3)
          &000000         (4)
          &000000         (5)
          &000000         (6)
          &000000         (7,     Bell)
          &000000         (8)
          &100002         (9,     Horizontal tab, <T>)
          &200003         (10,     New line or Line feed, <N>)
          &000000         (11,     Vertical tab or Throw)
          &000000         (12)
          &000000         (13)
          &000000         (14)
          &000000         (15)
          &000000         (16)
          &000000         (17)
          &000000         (18)
          &000000         (19)
          &000001         (20,     Stopcode, <H>)
          &000000         (21)
          &000000         (22)
          &000000         (23)
          &000050         (24)
          &000000         (25)
          &000000         (26)
          &000000         (27)
          &000000         (28)
          &000000         (29)
          &000000         (30)
          &000000         (31)

          &100002         (32,     Space, <S>)
          &000000         (33,     Exclamation mark)
          &000000         (34,  ‾  Tilde or Ditto)
          &000020         (35,     Sterling sign or 1/2)
          &000016         (36,  $  Dollar sign)
          &000017         (37,     Percentage sign)
          &000007         (38,  &)
          &000021         (39,  '  Acute accent or Apostrophe)
          &400010         (40,     Open round bracket)
          &000000         (41,     Close round bracket)
          &000011         (42,  *)
          &000007         (43,  +)
          &000000         (44,  ,)
          &000007         (45,  -)
          &000000         (46,  .)
          &000006         (47,  /)
          &010004         (48,  0)
          &010004         (49,  1)
          &010004         (50,  2)
          &010004         (51,  3)
          &010004         (52,  4)
          &010004         (53,  5)
          &010004         (54,  6)
          &010004         (55,  7)
          &010004         (56,  8)
          &010004         (57,  9)
          &000007         (58,  :)
          &000000         (59,  ;)
          &000014         (60,  <)
          &000000         (61,  =)
          &000013         (62,  >)
          &000000         (63,  ?  Suffix 10 or Question mark)

          &000000         (64,  @  Grave accent or AT symbol)
          &040005         (65,  A)
          &040005         (66,  B)
          &040005         (67,  C)
          &040005         (68,  D)
          &040005         (69,  E)
          &040005         (70,  F)
          &040005         (71,  G)
          &040005         (72,  H)
          &040005         (73,  I)
          &040005         (74,  J)
          &040005         (75,  K)
          &040005         (76,  L)
          &040005         (77,  M)
          &040005         (78,  N)
          &040005         (79,  O)
          &040005         (80,  P)
          &040005         (81,  Q)
          &040005         (82,  R)
          &040005         (83,  S)
          &040005         (84,  T)
          &040005         (85,  U)
          &040005         (86,  V)
          &040005         (87,  W)
          &040005         (88,  X)
          &040005         (89,  Y)
          &040005         (90,  Z)
          &000012         (91,  [)
          &000020         (92,     Sterling sign or \)
          &000000         (93,  ])
          &000015         (94,  ^)
          &000000         (95,  _  Left-pointing arrow)

          &000000         (96,  @  Grave accent or AT symbol)
          &020005         (97,  a)
          &020005         (98,  b)
          &020005         (99,  c)
          &020005         (100,  d)
          &020005         (101,  e)
          &020005         (102,  f)
          &020005         (103,  g)
          &020005         (104,  h)
          &020005         (105,  i)
          &020005         (106,  j)
          &020005         (107,  k)
          &020005         (108,  l)
          &020005         (109,  m)
          &020005         (110,  n)
          &020005         (111,  o)
          &020005         (112,  p)
          &020005         (113,  q)
          &020005         (114,  r)
          &020005         (115,  s)
          &020005         (116,  t)
          &020005         (117,  u)
          &020005         (118,  v)
          &020005         (119,  w)
          &020005         (120,  x)
          &020005         (121,  y)
          &020005         (122,  z)
          &000000         (123)
          &000000         (124)
          &000000         (125)
          &000000         (126)
          &000000         (127)

(GETCOL: Read next input character and update INCOL)

[ GETCOL CHIP CHIPL CHIPE INCOL HALT ]

GETCOL    >1
          11    CHIPL
          8     CHIPE
	  1	-20	  (Test for halt code)
	  7	HALT
          1     +10
          7     ;+3
          10    INCOL
          8     ;+3
          4     +1
          5     INCOL
          4     CHIP
          0     GETCOL
          /8    1

(PUTCOL: output character and update OUTCOL)

[ PUTCOL CHOPL CHOPE OUTCOL ]

PUTCOL    >1
          5     CH
          1     -10
          7     ;+3
          10    OUTCOL
          8     ;+3
          4     +1
          5     OUTCOL
          4     PUTCOL    (Return via CHOP)
          5     CHOPL
          4     CH
          8     CHOPE

CH        >1

(COPYWO: copy up to next separator from input to output)

[ COPYWO CHIP CHTABL GETCOL HALT PUTCOL SEPARA ]
COPYWO    >1
          4     CHIP
          11    PUTCOL
          8     PUTCOL+1
          11    GETCOL
          8     GETCOL+1
          0     CHIP
          /4    CHTABL
          6     SEPARA
          7     COPYWO+1
          0     COPYWO
          /8    1

(COPYLI: Copy rest of current line as is)

[ COPYLI CHIP CHIPE CHIPL CHOPE CHOPL HALT NEWLNE ]

COPYLI    4     CHIP      (Check for end of line)
          1     -10
          7     NEWLNE    (End of line found)
          4     CHIP      (Output character just read)
          11    CHOPL
          8     CHOPE
          11    CHIPL     (Get next character)
          8     CHIPE
          8     COPYLI+1

(ENSURE: Force output to start on a newline)

[ ENSURE OUTCOL PUTCOL ]

ENSURE    >1
          4     OUTCOL
          2     +1
          9     ;+3       (if OUTCOL > 1)
          0     ENSURE
          /8    1
          4     ENSURE    (Set up return via PUTCOL)
          5	PUTCOL
          4     +10       (PUTCOL[newline])
          8     PUTCOL+1

(FORCE1: Force output to be at tap stop 1)

[ FORCE1 OUTCOL PUTCOL SPACET TSTOPS ]

FORCE1    >1
          4     OUTCOL
          2     TSTOPS
          9     ;+2       (if OUTCOL > TSTOP)
          8     ;+4
          4     +10       (then PUTCOL[newline])
          11    PUTCOL
          8     PUTCOL+1
          4     FORCE1    (Set up for return via SPACET)
          5     SPACET
          4     TSTOPS    (SPACETO[TSTOPS])
          8     SPACET+1

(FIT: Test if can fit A characters on rest of current line)

[ FIT MAXCOL OUTCOL ]

N         >1

FIT       >1
          5     N
          4     MAXCOL
          2     OUTCOL
          1     N
          9     TRUE      (if OUTCOL+N<=MAXCOL)
          7     TRUE
FALSE     4     +0
          8     ;+2
TRUE      4     +1
          0     FIT
          /8    1

(SPACETO: Output spaces to position before column in A)

[ SPACET PUTCOL OUTCOL ]

COL       >1

SPACET    >1
          5     COL       (Target column)
(+2)      2     OUTCOL
          9     ;+2       (if OUTCOL < COL)
          8     ;+6
          4     +32       (then PUTCOL[space])
          11    PUTCOL
          8     PUTCOL+1
          4     COL
          8     SPACET+2  (and loop)
          0     SPACET    (else return)
          /8    1

(TABSTO: tab to stop A, A=1 order, A=2 address, A=3 comment
  or output blankspace if overrun))

[ TABSTO CHTABL SPACETO OUTCOL PUTCOL TSTOPS ]

STOP      >1

TABSTO    >1
          5     STOP
          4     TABSTO    (Set up for return via SPACETO)
          5     SPACET
          0     STOP
          /8    ;+0	  (Shouldn't happen)
          8     ST1       (Stop 1)
          8     ST2       (Stop 2)
          8     ST3       (Stop 3)

ST1       4     TSTOPS
          2     OUTCOL
          9     ;+5       (if OUTCOL < TSTOPS)
PUTBLK    4     TABSTO    (else PUTCOL[space])
          5     PUTCOL
          4     +32
          8     PUTCOL+1  (PUTCOL[space])
          4     TSTOPS    (then SPACETO[TSTOPS])
          8     SPACET+1

ST2       4     TSTOPS+1
          2     OUTCOL
          9     ;+2       (if OUTCOL < TSTOPS+1)
          8     PUTBLK    (else PUTCOL[space])
          4     TSTOPS+1  (then SPACETO[TSTOPS+1])
          8     SPACET+1

ST3       4     TSTOPS+2
          2     OUTCOL
          9     ;+2       (if OUTCOL < TSTOPS+2)
          8     PUTBLK    (else PUTCOL[space])
          4     TSTOPS+2  (then SPACETO[TSTOPS+2])
          8     SPACET+1

(SKIPBL: Skip over spaces and tabs)

[ SKIPBL BLANK CHIP CHTABL GETCOL ]

SKIPBL    >1
(+1)      0     CHIP
          /4    CHTABL
          6     BLANK
          7     ;+4
          11    GETCOL
          8     GETCOL+1
          8     SKIPBL+1
          0     SKIPBL
          /8    1

(UNBUFF: Output contents of buffer)

[ UNBUFF BUFFER BUFP PUTCOL ]

W        >1

UNBUFF	 >1
	 4	+1
	 5	W
LOOP	 4      BUFP	  (Test W<BUFP)
	 2	W
	 9	;+5	   
	 4	+1	  (Buffer emptied, reset pointer)
	 5	BUFP
	 0      UNBUFF
	 /8	1
	 0	W
	 /4	BUFFER
	 11	PUTCOL
	 8	PUTCOL+1
	 10 	W
 	 8	LOOP

(LEXICAL SCANNER

Scanning routines assume CHIP contain next character to process))

(ALPH: \ encountered - alphanumeric value)
(CONA: \ encountered - alphanumeric constant)

[ ALPH CHIP CONA FORCE1 GETCOL NEWLNE PUTCOL SCAN SPACET TSTOPS ]

CONA     11     FORCE1
	 8	FORCE1+1       

ALPH	 4	CHIP       (Output \)
	 11	PUTCOL
	 8	PUTCOL+1
	 11	GETCOL	  (Get first character)
	 8	GETCOL+1
	 1	-10	  (Test for newline)
	 7	NEWLNE
	 4	CHIP
	 11	PUTCOL
	 8	PUTCOL+1
	 11	GETCOL	  (Get second character)
	 8	GETCOL+1
	 1	-10	  (Test for newline)
	 7	NEWLNE
	 4	CHIP
	 11	PUTCOL
	 8	PUTCOL+1
	 11	GETCOL	  (Get third character)
	 8	GETCOL+1
	 1	-10	  (Test for newline)
	 7	NEWLNE
	 4	CHIP
	 11	PUTCOL
	 8	PUTCOL+1
	 11	GETCOL
	 8	GETCOL+1
	 8	SCAN

(COMENT: ( encountered - comment or title)

[ COMENT BUFFER BUFP CHIP CHTABL ENSURE FIT GETCOL HALT OUTCOL PUTCOL SCAN SKIPBL TABSTO UNBUFF WHITE ]

STOP	>1

(Helper routine to output newline and position at tab stop STOP)
NEWCOL	>1
	4	+10	  (Output newline)
	11	PUTCOL
	8	PUTCOL+1
	4	STOP	  (Tab to STOP)
	7	;+3
	11	TABSTO
	8	TABSTO+1
	0	NEWCOL
	/8	1

(Helper routine to output buffer with pagination)
OUTBUF  >1
	4	BUFP	  (Test if buffer fits in remainder of line)
	1	-1
	7	EXIT
	11	FIT
	8	FIT+1
	7	;+2
	8	;+3
	11	NEWCOL	  (Break comment over multiple lines)
	8	NEWCOL+1
	4	OUTBUF
	5	UNBUFF	  (Output buffer)
	8	UNBUFF+1
EXIT	0	OUTBUF
	/8	1

COMENT	11	GETCOL	  (look to see if a title)
	8	GETCOL+1
	1	-40	  (Open round bracket)
	7	;+2
	8	NOTITL
(Title)
	4	+0	  (Titles in column 1)
	5	STOP
	11	ENSURE	  (Check at start of line)
	8	ENSURE+1
	4	CHIP
	5	BUFFER+1  (Buffer opening bracket)
	4	+2
	5	BUFP
	11	GETCOL	  (Get next character)
	8	GETCOL+1
	8	PAGINA

(Comment)
NOTITL	4	OUTCOL	  (Test if at start of line)
	1	-1
	7	;+2
        8	COL3
	4	+0	  (Position comment at start of line)
	5	STOP
	8	PAGINA

(Comment not at start of line)
COL3	4	+3	  (Position comment in column 3)
	5	STOP
	11	TABSTO
	8	TABSTO+1

(In correct position, paginate comment text)
PAGINA	4	+40	  (Output opening bracket)
	11	PUTCOL
	8	PUTCOL+1
TESTCH	4	CHIP
	1	-41	  (Close round bracket)
	7	CLOSE
	1	+31
	7	NL	  (Newline)
	1	-10
	7	HLT	  (Halt code)
 	0	CHIP	  (Look for white space)
	/4	CHTABL
	6	WHITE
	7	;+2
	8	WHTSPC
	4	CHIP	  (Not white space, store in buffer)
        0	BUFP
	/5 	BUFFER
	10	BUFP
	11	GETCOL
	8	GETCOL+1
	8	TESTCH	  (Inspect next character)

NL	11	OUTBUF	  (Flush buffer on newline)
	8	OUTBUF+1
	11	NEWCOL
	8	NEWCOL+1
	11	GETCOL
	8	GETCOL+1
	11	SKIPBL	  (this will go wrong if comment is indented in column 3)
	8	SKIPBL+1
	8	TESTCH	  (and continue scanning)

HLT	11	OUTBUF	  (Flush buffer on halt)
	8	OUTBUF+1
	8	HALT

(White space found - empty buffer)
WHTSPC	11	OUTBUF	  (Output buffer with pagination)
	8	OUTBUF+1
OUTSPC	1	+1	  (Test if room for white space)
	11	FIT
	8	FIT+1
	7	;+2
	8	;+3
	11	NEWCOL	  (Break comment over multiple lines)
	8	NEWCOL+1
	4	CHIP
	11	PUTCOL	  (Output white space character)
	8	PUTCOL+1
	11	GETCOL	  (Get next character)
	8	GETCOL+1
	8	TESTCH	  (Continue processing comment)
	
(Close bracket found)
CLOSE	4	BUFP	  (Deal with anything left in buffer)
	1	-1
	7	OUTKET	  (Test if buffer empty)
	11	FIT
	8	FIT+1
	7	;+2	  (Test if buffer will fit on line)
	8	;+3
	11	NEWCOL
	8	NEWCOL+1
	11	UNBUFF
	8	UNBUFF+1
OUTKET	4	+1
	11	FIT
	8	FIT+1
	7	;+2
	8	;+3
	11	NEWCOL
	8	NEWCOL+1	
	4	CHIP	  (Output closing bracket)
	11	PUTCOL
	8	PUTCOL+1
	11	GETCOL	  (Read next character)
	8	GETCOL+1
	8	SCAN

(CONN: +, - or & encountered - numeric constant)

[ CONN CHIP COPYWO FORCE1 GETCOL PUTCOL SCAN SPACET TSTOPS ]

CONN     11     FORCE1
	 8	FORCE1+1 
	 4	CHIP       (Output first character)
	 11	PUTCOL
	 8	PUTCOL+1
	 11	GETCOL	   (Get next character)
	 8	GETCOL+1
	 11	COPYWO	   (Copy rest of constant)
	 8	COPYWO+1
	 8	SCAN

(GLOBAL: [ encountered - global label list)

[ GLOBAL CHIP CHTABL FIT GETCOL PUTCOL BUFFER BUFP COPYWO ENSURE SCAN SKIPBL WHITE UNBUFF ]

(Helper - output newline, blank, blank)
NLBLBL	>1
	4	+10
	11	PUTCOL
	8	PUTCOL+1
	4	+32
	11	PUTCOL
	8	PUTCOL+1
	4	+32
	11	PUTCOL
	8	PUTCOL+1
	0	NLBLBL
	/8 1

(Helper - output buffered id, if any)

OUTBUF	>1
	4	BUFP
	1	-1
	7	EXIT	  (Test if anything buffered)
	11	FIT
	8	FIT+1
	7	;+5	  (Test if buffer fits on line)
	4	+32	  
	11	PUTCOL
	8	PUTCOL+1
	8	;+3
	11	NLBLBL
	8	NLBLBL
	11	UNBUFF	   (Output buffered identifier)
	8	UNBUFF+1
EXIT	0	OUTBUF
	/8	1
	
GLOBAL	11	ENSURE	  (Put on newline)
	8	ENSURE+1
	4	CHIP	  (Output [)
	11	PUTCOL
	8	PUTCOL+1
GETCH	11	GETCOL	  (Get next character)
	8	GETCOL+1
	1	-93	  (test for ])
	7	END
	0	CHIP	  (Test for white space)
	/4	CHTABL
	6	WHITE
	7	NOTWHT

(White space separates identifiers)
	11	OUTBUF
	8	OUTBUF+1
	8	GETCH

(Buffer identifiers)
NOTWHT	4	CHIP	  (Not white space - buffer)
	0	BUFP
	/5	BUFFER
	10	BUFP
	8	GETCH

(] reached)
END	11	OUTBUF	  (Output buffered identifier if any)
	8	OUTBUF+1
	4	+2	  (check space for ])
	11	FIT
	8	FIT+1
	7	;+2
	8	;+4
        11	NLBLBL	  (Output newline sequence)
	8	NLBLBL+1
	8	;+4
	4	+32
	11	PUTCOL
	8	PUTCOL+1
	4	CHIP	  (Output ])
	11	PUTCOL
	8	PUTCOL+1
	11	GETCOL	  (Get next character)
	8	GETCOL+1
	11	SKIPBL	  (Skip any spaces or tabs)
	8	SKIPBL+1
	4	CHIP
	1	-10
	7	SCAN	  (Test if at end of line)
	4	+10	  (No - force blank line)
	11	PUTCOL
	8	PUTCOL+1
	8	SCAN

(HALT: Halt code encountered)

[ HALT CHIP CHOPE CHOPL UNBUFF ]

HALT  	  11	UNBUFF	  (Clear buffer)
	  8	UNBUFF+1    
	  4     CHIP      (Terminate output and stop)
          11    CHOPL
          8     CHOPE
          8     ;+0

(INSTRN: / or digit encountered - scan instruction )

[ INSTRN ALPH CHIP CHOPL CHOPE COPYWO FORCE1 PUTCOL SCAN SKIPBL TABSTO ]

INSTRN	  11	FORCE1	  (Put function in column 2)
	  8	FORCE1+1
	  11	COPYWO	  (Copy function and modifier)
	  8	COPYWO+1
	  4	+2
	  11 	TABSTO	  (Tab to column 3 for address)
	  8	TABSTO+1
	  11	SKIPBL	  (Skip to address)
	  8	SKIPBL+1
          4     CHIP
	  1	-35	  (Test for sterling sign)
	  7	ALPH	  (Alphanumeric literal)
	  1	-26	  (Test for =)
	  7	QUASI
	  1	-31	  (Test for \)
	  7	ALPH	  (Alphanumeric literal)
	  1	+57
	  7	ALPH	  (Test for sterling)
	  11	COPYWO	  (Copy address field)
	  8	COPYWO+1
	  8	SCAN

(Quasi instruction address form)
QUASI    11	COPYWO	  (Copy function field)
	 8	COPYWO+1
	 4	+32	  (Output space)
	 11	PUTCOL
	 8	PUTCOL+1
	 11	SKIPBL	  
	 8	SKIPBL+1
	 11	COPYWO	  (Copy address field)
	 8	COPYWO+1
	 8	SCAN

(LABEL: Alphabetic encountered - label)

[ LABEL COPYWO ENSURE SCAN ]

LABEL	11	ENSURE	  (Put on a newline)
	8	ENSURE+1
	11	COPYWO	  (Copy label [or label=wxyz])
	8	COPYWO+1
	8	SCAN

(NEWLNE: Newline encountered)

[ NEWLNE GETCOL SCAN PUTCOL ]

NEWLNE    4     +10       (Output newline)
          11    PUTCOL
          8     PUTCOL+1
          11    GETCOL    (Fetch next character)
          8     GETCOL+1
          8     SCAN

(OPTION: * encountered - option - put on a line by itself)
(PATCH:  ^ encountered - patch - put on line by itself)

[OPTION PATCH CHIP CHTABL COPYWO ENSURE GETCOL LETTER PUTCOL SCAN SKIPBL ]

CH	  >1

OPTION	  11	ENSURE	  (Start a newline)
	  8	ENSURE+1
	  4	CHIP	  (Output *)
	  11	PUTCOL
	  8	PUTCOL+1
	  11	GETCOL	  (Get next character)
	  8	GETCOL+1
	  0	CHIP	  (Look for letter)
	  /4	CHTABL
	  6	LETTER
	  7	NOTLET

(*word [word] case)
	  4	CHIP	  (Remember initial letter)
	  5	CH
	  11	COPYWO	  (Copy first word)
	  8	COPYWO+1
	  4	CH	  (Test if *PROG or *prog)
	  1	-80
	  7	PROG
	  1	-32
	  7	PROG
	  8	SCAN
PROG	  11	SKIPBL	  (Skip blanks before second word)
	  8	SKIPBL+1
	  4	+32	  (Output space)
	  11	PUTCOL
	  8	PUTCOL+1
	  8	COPY	  (Copy second word)

(*+n case)
NOTLET	  4	CHIP	  (Look for + and ignore)
	  1	-43
	  7	PLUS
COPY	  11	COPYWO
	  8	COPYWO+1
	  8	SCAN
PLUS	  11	GETCOL	  (Skip +)
	  8	GETCOL+1
	  8	COPY
	
(Patch ^ddd, ^+ddd, ^ident, ^ident+ddd, ^ident-ddd)
PATCH     11    ENSURE    (Start a newline)
          8     ENSURE+1
          4     CHIP      (Output ^)
          11    PUTCOL
          8     PUTCOL+1
          11    GETCOL    (Look for + and ignore)
          8     GETCOL+1
          1     -43
          7     PLUS
          8     COPY

(OBEY: ' encountered - put on line by itself)

[ OBEY COPYWO ENSURE PUTCOL SCAN SKIPBL TABSTO ]

OBEY	  11	ENSURE	  (Put on line by itself)
	  8	ENSURE+1
	  4	+1	  (Tab to second column)
	  11 	TABSTO
	  8	TABSTO+1
	  11	COPYWO	  (Copy ' and opening function code)
	  8	COPYWO+1
	  11	SKIPBL	  (Skip to address)
	  8	SKIPBL+1
	  4	+32	  (Output space)
	  11	PUTCOL
	  8	PUTCOL+1
	  4	+2	  (Tab to column 3)
	  11	TABSTO
	  8	TABSTO+1
	  11	COPYWO	  (Copy address and closing ')
	  8	COPYWO+1
	  8	SCAN

(PERCEN: Percent encountered - terminate - put on line by itself)
(RESTOR: Dollar encountered - restore - put on a line by itself)

[ PERCEN RESTOR CHIP ENSURE GETCOL PUTCOL SCAN ]

PERCEN
RESTOR    11    ENSURE    (Start a newline)
          8     ENSURE+1
          4     CHIP      (Output percent)
          11    PUTCOL
          8     PUTCOL+1
          11    GETCOL    (Get next character)
          8     GETCOL+1
          8     SCAN

(SKIP: > encountered - skip)

[ SKIP CHIP COPYWO FORCE1 GETCOL PLUS PUTCOL SCAN SPACET TSTOPS ]

SKIP      11    FORCE1	  (Force to second column)
	  8	FORCE1+1
	  4	TSTOPS
	  11	SPACET
          8     SPACET+1         
	  4	CHIP       (Output first character)
	  11	PUTCOL
	  8	PUTCOL+1
	  11	GETCOL	   (Get next character)
	  8	GETCOL+1
	  1     -43	   (Look for + and ignore)
	  7	PLUS
COPY	  11	COPYWO	   (Copy rest of constant)
	  8	COPYWO+1
	  8	SCAN
PLUS	  11	GETCOL	    (Skip +)
	  8	GETCOL+1
	  8	COPY

(TRIGGR: < encountered - trigger)

[ TRIGGR CHIP GETCOL OUTCOL PUTCOL SCAN SPACET TRIGST ]

TRIGGR	  4	TRIGST	  (Test OUTCOL < TRIGST)
	  2	OUTCOL
	  9	LESS
	  4	+32	  (Output space)
	  11	PUTCOL
	  8	PUTCOL+1
OUT	  4	CHIP	  (Output <)
	  11	PUTCOL
	  8	PUTCOL+1
	  11	GETCOL	  (Get next character)
	  8	GETCOL+1
	  8	SCAN
LESS	  4	TRIGST	  (Tab to TRIGST)
	  11	SPACET
	  8	SPACET+1
	  8	OUT

[ SIRTDY BUFFER BUFP CHIP CHIPF CHOPC CHOPE CHOPF CHOPL CHTABL COMENT CONA CONN COPYLI GETCOL GLOBAL
  HALT INCOL INSTRN LABEL NEWLNE OBEY OPTION OUTCOL PATCH PERCEN RESTOR SCAN SKIP TRIGGR UNBUFF ]

CHCODE    >1

SIRTDY    4     +0        (Housekeeping)
          5     CHIPF     (Initialize input)
          5     CHOPF     (initialize output)
          4     +1
          5     CHOPC     (Select 900 telecode output)
	  5	BUFP	  (Initilaize buffer pointer)

(Main loop to decode next SIR unit)
GETCH     11    GETCOL
          8     GETCOL+1
SCAN      0     CHIP      (Switch on character type)
          /4    CHTABL
          6     &37
          5     CHCODE
          0     CHCODE
          /8    ;+1
          8     COPYLI    (Invalid SIR)
          8     ;+0       (Halt code - filtered out by GETCOL)
          8     GETCH     (Space or Tab)
          8     NEWLNE    (Newline)
          8     INSTRN    (Digit)
          8     LABEL     (Letter)
          8     INSTRN    (/)
          8     CONN      (+-&)
          8     COMENT    (Open round bracket)
          8     OPTION    (*)
          8     GLOBAL     ([)
          8     SKIP      (>)
          8     TRIGGR    (<)
          8     PATCH     (^)
          8     RESTOR    ($)
          8     PERCEN    (Percent)
          8     CONA	  (\)
	  8	OBEY	  (')

*0

((TELECODE CHARACTER INPUT & OUTPUT SUBROUTINE, 31/3/70)

[ CHIP CHIPF CHIPL CHIPE CHOPF CHOPL CHOPE CHOPC ERRORL ERRORE ]

(TELECODE INPUT SUBROUTINE)

(Appears, to the users programme, to read one 903/ISO or 920
 Telecode character from tape, and convert to internal
 code, but reads tape in one line at a time)

CHIPE     4     CHIPF
          7     FILBUF    (Test if first entry)
          4     CHIP
          1     -10       (C-10, test if <N>)
          7     FILBUF
          1     -10       (C-20, test if <H>)
          7     ;+0

READBF    0     BUFCT
          4     BUFCT
          1     -61
          9     ;+4
          /4    LINE-61   (Read character from m.s. end)
          14    8185
          8     ;+3
          /4    LINE      (Read character from l.s. end)
          6     &177
          5     CHIP
          10    BUFCT

          0     CHIPL
          /8    1

FILBUF    5     BUFCT

(+1)      4     +0
          5     BAR
(+3)      15    2048
          5     CHIP
          11    BITCTL
          8     BITCTE
          14    17
          9     CH1       (Parity error)

          4     CHIP
          7     FILBUF+3  (Ignore blanks)
          6     &177      (Delete parity from track 8)
          5     CHIP
          1     -127      (Ignore erases)
          7     FILBUF+3

          4     CHIPF     (Read first charater)
          7     ;+2       (Jump iff first entry)
          8     ;+3
          4     CHIP
          5     CHIPF     (Store first character)

          1     -13       (Test if 903/ISO C.R.)
          7     IN903
          1     +3        (Test if 903/ISO L.F./N.L.)
          7     IN903
          1     -8        (Test if 920 N.L.)
          7     IN920
          8     CH2       (1st character not newline)

IN920     4     BAR
          7     SIP

          4     CHIP
          1     -99       (Test if S)
          7     ;+6
          1     +40       (Test if <)
          7     ;+5
          1     +15       (Test if >)
          7     ;+4
          8     CH3       (Illegal character after vert. bar)
          4     -3
          1     -57
          1     +96
          8     DIP

SIP       4     CHIP
          1     -126      (Test if vertical bar)
          7     ;+2
          8     ;+3
          10    BAR
          8     FILBUF+3

          0     CHIP
          /4    CODTAB
          6     &177
          7     CH3       (Jump iff illegal character)

DIP       5     CHIP
          8     ;+4

IN903     4     CHIP
          1     -13       (C-13, test if C.R.)
          7     FILBUF+3

          0     BUFCT
          4     BUFCT
          1     -61
          9     ;+7
          /4    LINE-61
          14    8185
          4     CHIP
          14    7
          /5    LINE-61   (Store character in m.s. end)
          8     ;+3
          4     CHIP
          /5    LINE      (Store character in l.s. end)
          10    BUFCT

          4     CHIP
          1     -10       (C-10, test if <N>)
          7     CLECT
          1     -10       (C-20, test if <H>)
          7     CLECT

          4     BUFCT
          1     -121
          7     CH4       (Jump iff line too long)
          8     FILBUF+1

CLECT     5     BUFCT
          8     READBF

(TELECODE OUTPUT SUBROUTINE)

(Prints one or several internal code
 characters in 903/ISO or 920 Telecode)

CHOPE     5     CHOP
          6     +127
          5     OPC

          4     CHOPF
          7     BLANKS    (Test for 1st entry)

TESCOD    4     CHOPC
          7     OP920     (Test output telecode)

(OP903)   4     OPC
          1     -9        (C-9,  test if <T>)
          7     ;+4
          1     -1        (C-10, test if <N>)
          7     ;+3
          8     INSPTY
          4     +19       (Prefix <T> by <S>)
          1     +141      (Carriage Return)
          15    6144
          8     INSPTY

OP920     0     OPC
          /4    CODTAB
          9     ;+4
          4     +126      (Vertical Bar)
          15    6144
          /4    CODTAB
          14    8185
          6     &177
          7     CH3       (Jump iff illegal character)
          5     OPC

INSPTY    4     OPC
          11    BITCTL
          8     BITCTE
          2     +0
          14    7
          1     OPC
          15    6144

          4     CHOP
          6     &177
          1     -10       (C-10, test if <N>)
          7     NL
          1     -10       (C-20, test if <H>)
          7     BLANKS
          8     OUTEND

NL        15    6144
          15    6144
          15    6144
          15    6144

OUTEND    4     CHOP
          1     +128
          9     CHOPE

          6     &177
          0     CHOPL
          /8    1

BLANKS    4     -46080    (-180*256)
          15    6144
          1     +256
          9     ;-2

          4     CHOPF
          2     -1
          5     CHOPF
          9     TESCOD
          8     OUTEND

(FAST BIT-COUNTING SUBROUTINE)

(Places the parity of the character in the
 Acctr. on entry in the Acctr.)

BITCTE    0     BITCTL
          14    8188
          1     =14 1
          5     ;+6
          4     +0
          14    4
          1     =14 1
          5     ;+5
          2     &323130   (Set Q-register)
TOTAL     >1
          5     TOTAL
          2     &323130   (Set Q-register)
BITCTL    >1
          1     TOTAL
          /8    1

(WORKSPACES)

CHIPF     >1              (+0 on first entry to CHIPE S/R)
CHIPL     >1              (Link)
CHIP      >1              (Last character read in)
CHOPF     >1              (+0 on first entry to CHOPE S/R)
CHOPL     >1              (Link)
CHOPC     +1              (Output telecode: +0=920, +1=903)
BUFCT     >1              (Line buffer pointer)
BAR
OPC       >1
LINE      >61             (Line buffer)
CHOP      >1

(CODE TABLE)

(A table for converting 920 Telecode to & from
 an internal 7-bit code. The internal code is basically
 903/ISO code, and is given below.)

CODTAB    &400000         (0)
          &400000         (1)
          &400000         (2)
          &400013         (3)
          &400000         (4)
          &400000         (5)
          &400000         (6)
          &400000         (7,     Bell)
          &400000         (8)
          &405051         (9,     Horizontal tab, <T>)
          &404454         (10,     New line or Line feed, <N>)
          &400600         (11,     Vertical tab or Throw)
          &400072         (12)
          &400000         (13)
          &400000         (14)
          &400057         (15)
          &400040         (16)
          &400000         (17)
          &400012         (18)
          &400000         (19)
          &407011         (20,     Stopcode, <H>)
          &400000         (21)
          &400000         (22)
          &400000         (23)
          &400050         (24)
          &400000         (25)
          &400000         (26)
          &400043         (27)
          &400024         (28)
          &400046         (29)
          &400052         (30)
          &400000         (31)

          &404000         (32,     Space, <S>)
          &400061         (33,     Exclamation mark)
          &417462         (34,  "  Tilde or Ditto)
          &406600         (35,  £  Sterling sign or 1/2)
          &030664         (36,  $  Dollar sign)
          &413600         (37,     Percentage sign)
          &407200         (38,  &)
          &016667         (39,  '  Acute accent or Apostrophe)
          &406070         (40,     Open round bracket)
          &402335         (41,     Close round bracket)
          &407477         (42,  *)
          &413340         (43,  +)
          &402476         (44,  ,)
          &413453         (45,  -)
          &417655         (46,  .)
          &403645         (47,  /)
          &414060         (48,  0)
          &410200         (49,  1)
          &410400         (50,  2)
          &414663         (51,  3)
          &411000         (52,  4)
          &415265         (53,  5)
          &415466         (54,  6)
          &411600         (55,  7)
          &412133         (56,  8)
          &416271         (57,  9)
          &403047         (58,  :)
          &424074         (59,  ;)
          &416675         (60,  <)
          &417136         (61,  =)
          &413042         (62,  >)
          &412456         (63,  ?  Suffix 10 or Question mark)

          &013077         (64,  `  Grave accent or AT symbol)
          &420301         (65,  A)
          &420502         (66,  B)
          &424743         (67,  C)
          &421104         (68,  D)
          &425345         (69,  E)
          &425546         (70,  F)
          &421707         (71,  G)
          &422110         (72,  H)
          &426351         (73,  I)
          &426552         (74,  J)
          &422713         (75,  K)
          &427154         (76,  L)
          &423315         (77,  M)
          &423516         (78,  N)
          &427757         (79,  O)
          &430073         (80,  P)
          &434341         (81,  Q)
          &434542         (82,  R)
          &430703         (83,  S)
          &435144         (84,  T)
          &431305         (85,  U)
          &431506         (86,  V)
          &435747         (87,  W)
          &436150         (88,  X)
          &432311         (89,  Y)
          &432512         (90,  Z)
          &416153         (91,  [)
          &406714         (92,  £  Sterling sign or Reverse /)
          &412355         (93,  ])
          &417356         (94,  ^)
          &400117         (95,     Left-pointing arrow)

          &013120         (96,  `  Grave accent or AT symbol)
          &424361         (97,  a)
          &424562         (98,  b)
          &420723         (99,  c)
          &425164         (100,  d)
          &421325         (101,  e)
          &421526         (102,  f)
          &425767         (103,  g)
          &426170         (104,  h)
          &422331         (105,  i)
          &422532         (106,  j)
          &426600         (107,  k)
          &423000         (108,  l)
          &427200         (109,  m)
          &427400         (110,  n)
          &423600         (111,  o)
          &434160         (112,  p)
          &430321         (113,  q)
          &430522         (114,  r)
          &434763         (115,  s)
          &431124         (116,  t)
          &435365         (117,  u)
          &435566         (118,  v)
          &431727         (119,  w)
          &432130         (120,  x)
          &436371         (121,  y)
          &436572         (122,  z)
          &400000         (123)
          &400000         (124)
          &400000         (125)
          &400000         (126)
          &400000         (127)

(ERROR INDICATIONS)

CH1 	4 	+1
 	8 	;+6
CH2 	4 	+2
 	8 	;+4
CH3 	4 	+3
 	8 	;+2
CH4 	4 	+4

 	0 	+0
 	14 	6
 	1 	£ 0.
 	5 	ERRNO
 	11 	ERRORL
 	8 	ERRORE
 	£CH
 	£I/O
 	£ ER
 	£ROR
ERRNO 	>1

((ERROR ROUTINE)

[ ERRORL ERRORE CHOPF CHOPL CHOPE ]

(Prints out the error message following the entry
 instructions in alphanumeric group form, until
 a full-stop is found, then stops. The message
 is preceded by <N>, followed by <H>, and is in the
 current output code)

ERRORL    >1

ERRORE    4     +0
          5     CHOPF
          4     +10
          11    CHOPL
          8     CHOPE

NEXTWD    4     -2
          5     COUNT
          10    ERRORL
          0     ERRORL
          /4    0

NEXTCH    5     WORD
          14    8180
          6     &77
          1     -14       (6-bit code test if .)
          7     STOP
          1     +46       (Restore 7-bit code)
          11    CHOPL
          8     CHOPE

          4     COUNT
          7     NEXTWD
          10    COUNT

          4     WORD
          14    6
          8     NEXTCH

STOP      4     +20
          11    CHOPL
          8     CHOPE
          8     ;+0

COUNT     >1
WORD      >1

%
<! Halt !>