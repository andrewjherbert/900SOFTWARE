
*19

((EXTENDED STORE TEST WITH OCTAL OUTPUT AND STOP, 14/10/19)

(DERIVED FROM TJF XSTORE 25/5/15)

[]

(Phase:  0 [0] - write 0)
(Phase:  2 [1] - inverted address)
(Phase:  4 [2] - ascending addresses)
(Phase:  6 [3] - inverted ascending addresses)
(Phase:  8 [4] - checkered)
(Phase: 10 [5] - inverted chequered)
(Phase: 12 [6] - chequered ascending)
(Phase: 14 [7] - chequered ascending inverted)

(Chequerboard for 920B

      0  1  2  3  4  5  6  7   ...  60 61 62 63
  0   0  1  1  0  0  1  1  0   ...   0  1  1  0
 64   1  0  0  1  1  0  0  1   ...   1  0  0  1
128   1  0  0  1  1  0  0  1   ...   1  0  0  0
192   0  1  1  0  0  1  1  0   ...   0  1  1  0

loc AND &003 = &000 or &003 => pattern otherwise NOT pattern
loc AND &300 = &100 or &200 => invert)


<
          8     XSTORE    (Restart)
          8     CONTIN+1  (Continue after error)
XSTORE    4     +141      (Output cr lf)
          15    6148
          4     +10
          15    6148

          4     =0 0      (Start at module 0)
          5     CYCLES    (Count cycles)
MODLOP    5     MODULE    (Module to test)
          7     ;+4       (Module 0?)
          5     AFIRST    (Start at word 0 in modules > 0)
          1     =1 0      (Finish at word 8191 in modules > 0)
          8     ;+4
(+4)      4     =0 196    (Start address in module 0 from FIRST NEXT message)
          5     AFIRST    (Where to start)
          4     =0 8180   (Stop at 8180 in module 0)
(+4)      5     ANEXT     (Where to stop)

          4     +0        (Start at phase 0)
          5     PHASE
PLOOP     4     +0        (Start new phase, set error count to 0)
          5     ERRORS
          4     AFIRST    (Address to test)
          5     POINTR
ALOOP     2     ANEXT     (At end?)
          7     AEXIT

          4     PHASE     (Phase & 4 = 4 - ASCENDING)
          6     +4
          7     ;+2       (Jump iff not ASCENDING)
          4     POINTR    (Pattern is address)
(+2)      5     PATERN    (address or 0)

          4     PHASE     (Phase & 2 = 2 - INVERTED) 
          6     +2
          7     ;+4       (Jump iff not INVERTED)
          4     PATERN    (Pattern := ~Pattern)
          2     -1
          5     PATERN

(+4)      4     PHASE     (Phase & 8 = 8 - CHEQUERED)
          6     +8
          7     NOTCHQ    (Jump iff not CHEQUERED)
          4     POINTR    
          6     &003
          7     ;+6
          2     &003
          7     ;+4
          4     PATERN    (Invert pattern for 0, 3, 4, 7, ...)
          2     -1
          5     PATERN
(+6, +4)  4     POINTR    (Address & 003 ~= xx0 or xx3)
          6     &300
          7     ;+6
          2     &300
          7     ;+4
          4     PATERN    (Invert pattern for n*64, n*128)
          2     -1
          5     PATERN

(+6, +4)
NOTCHQ    4     PHASE     (Not chequered)
          6     +1        (Phase & 1 = 1 - READBACK)
          7     CONTIN    (Jump iff not READBACK)

          0     POINTR    (Read back previously written data)
          4     PATERN    (Data written)
          5     EXPECT
          /2    0
          7     ;+2       (As expected)
          8     FAILED
          4     PATERN    (Write inverted pattern)
          2     -1
          5     EXPECT
          /5    0
          /2    0         (And read back)
          7     ;+2
          8     FAILED
(+2)      4     PATERN    (Write original pattern)
          5     EXPECT
          /5    0
          /2    0         (And read back)
          7     CONTIN

FAILED    5     ERROR     (erroneous bit pattern)
          10    ERRORS    (Increment error count)
          4     ERRORS
          2     +20
          9     CONTIN    (Jump iff 20 < ERRORS)

          4     +135      (Bell)
          15    6148
          4     +141      (cr lf)
          15    6148
          4     +10
          15    6148
          4     POINTR    (Failing address)
          11    SLOPL
          8     SLOPO
          15    6148
          4     EXPECT    (Expected pattern)
          11    SLOPL
          8     SLOPO
          15    6148
          4     ERROR     (Found pattern)
          11    SLOPL
          8     SLOPO
          4     +141
          15    6148
          4     +10
          15    6148
          4     CYCLES    (How many times round)
          11    SLOPL
          8     SLOPO

CONTIN    8     ;+0      (Stop after error, continue at 9)
          0     POINTR   (Write pattern at pointer)
          4     PATERN
          /5    0
          10    POINTR   (Increment pointer)
          4     POINTR
          8     ALOOP    (On to next address)

AEXIT     4     PHASE     (All of module tested)
          6     +1
          7     NEXTP     (Jump iff not READBACK)

          4     +141      (Output cr lf)
          15    6148
          4     +10
          15    6148
          4     PHASE     (Output module + phase/2)
          14    8191
          6     +7
          1     MODULE
          11    SLOPL
          8     SLOPO
          15    6148
          4     ERRORS    (Output error count)
          11    SLOPL
          8     SLOPO

NEXTP     10    PHASE     (Go to next phase)
          4     PHASE
          2     +16
	  7     NEXTM
          8     PLOOP

NEXTM     10    CYCLES
          4     MODULE    (Go to next module)
	  1     =1 0
          6     =1 0
          8     MODLOP

MODULE=2
AFIRST=3
ANEXT=4
POINTR=5
PHASE=6
PATERN=7
EXPECT    >1
ERROR     >1
ERRORS    >1

CYCLES    >1

SLOPV     >1
SLOPS     >1
SLOPL     >1
BREG=1

SLOPO     5     SLOPV
          4     -18
(+2)      1     +3
          5     SLOPS
          0     SLOPS
          4     SLOPV
          /14   0
          6     +7
          5     BREG
          4     &151      (Parity bits of octal digits)
          /14   0
          6     +128
          1     +48
          1     BREG
          15    6148
          4     SLOPS
          9     SLOPO+2

          4     +160
          0     SLOPL
          /8    1

%
