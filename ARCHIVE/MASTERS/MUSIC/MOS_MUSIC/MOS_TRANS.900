translate;
"begin"

"comment" Program to translate music tapes from PFMUSIC to AJHMUSIC;

    "integer" "array" digit[0:33], note[1:45], name[1:135];
    "integer" lo, hi, mid, i, j, lastf, freq, dur, notes, names, count;
    "integer" min, max, long, new;
    "real" r;

    "comment"
	digit is used to hold strings for duration 'digits' 0, 1, 2, ..., @.
	    N.B. two words per digit to handle {{U}} for @.
        note is used to hold shift count of each note.
        duration is used to hold number of cycle count for one second of note playout.
        name is used to hold textual name of note as 3 word string.
        lo, mid, hi are used in binary search: mid is index of note at end of search.
        i, j are used as integer workspace.
  	lastf is used to record last cycle countread to ensure input in descending order.
    	freq, dur are used to hold input cycle count and duration.
        notes, names are used to inde next free slot in note and name respectively.
	count is used to output a newline after every 20 notes output.
        transp is used to transpose the output up or down by n semitones.
        min and max are used to record lowest and highest notes translated.
        long records longest duration translated;

    "comment" Diagnostic output to teleprinter;
    punch(3);

    "comment" Read in table of digits;
    "print" {{L2}Reading table of digits.{L2}};
    "for" i := 0 "step" 1 "until" 16 "do" "begin"
    	"integer" j; j := i+i; instring(digit, j)
    "end" for;

    "comment" Read in translation table.
	Consists of a sequence of pairs f s where:
	f is a integer note shift count, The sequence is terminated if f is negative.
	s is a string containing the textual form of the note, e.g., {A}.
	The sequence must be in descending order of f values.;

    "comment" initialize variables;
    notes := names := 1; lastf := min := 131071; count := long := max := 0;
    "print" {{L2}Reading translation table.{L2}};

    "comment" read in next triple of translation table;
ReadTable:
    "read" freq;  
    "if" freq < 0 "then" "goto" ReadTune; 
    "if" freq "ge" lastf "then" "begin"
	"print" {{L3}Translation table not in descending order.{L3}}; stop;
    "end" if;
    lastf := freq;
    "if" notes > 45 "then" "begin"
	"print" {{L3}Translation table full{L3}}; stop
    "end" if;
    note[notes] := freq; 
    i := names; instring(name,i);
    notes := notes+1; names := names+3;
    "goto" ReadTable;
   
    "comment" Translate tune;    
ReadTune: 
    "print" {{L2}Load tune tape and jump to 9.{L2}};
    wait;

    "comment" AJHMUSIC requires an initial newline;
    "print" punch(1), {{L}};

NextNote:
    "read" freq; "if" freq < 0 "then" "goto" EndTune;
    "read" dur;

    "comment" Binary search for the note;
    	lo := 1; hi := notes-1;
Search:  
    "if" lo > hi "then" "begin"
	mid := lo; "goto" NotFound
    "end";
    mid := (lo+hi)"div"2;
    "if" note[mid] = freq "then" "goto" Found;
    "if" note[mid] > freq "then" 
        lo := mid+1
    "else"
	hi := mid-1;
    "goto" Search;

    "comment" Here if input not not defined;
NotFound:
    "print" {{L3}Note }, freq, { not defined.{L3}};
    stop;

    "comment" Convert to TJF notation and punch to tape;
Found:

    "if" note[mid] "ne" 900 "and" mid < min "then"
	min := mid
    "else" "if" mid > max "then"
	max := mid;

    "if" mid < 1 "then" "begin"
	"print" punch(3), {{L3}Transposition takes}, sameline, freq, 
				{ below available notes.{L3}};
        stop
        "end"
    "else" "if" mid > notes "then" "begin"
	"print" punch(3), {{L3}Transposition takes}, sameline, freq, 
				{ above available notes.{L3}};
        stop
        "end";

    punch(1);

    "comment" Punch note name;
    i := mid*3-2; outstring(name,i);

    "comment" Calculate duration of note;
    r := (note[mid]*3.0+96.0)*dur;  "comment" usec;
    r := r / 140000 + 0.5;
    i := r;

    "comment" Check duration is within range permitted;
    "if" i "le" 0 "then" "begin"
	"print" punch(3), {{L3}Duration too short in:}, sameline, freq, 
			  dur, {{L3}}; i := 1;
    "end" if;
    "if" i > 16 "then" "begin"
	"print" punch(3), {{L3}Duration too long (}, sameline, i, { ) in:}, freq, 
			  dur, {{L3}}; 
    "end" if;

    "comment" Update long if appropriate;
    "if" i > long "then" long := i;

    "comment" Punch duration symbol;
    "if" i > 16 "then" "begin" "comment" split into two notes;
	j := 32; 
        i := i-16; 
        outstring(digit,j);
        j := mid*3-2; outstring(name,j)
    "end"; 
    i := i+i; outstring(digit,i);

    "comment" Insert a new line every 25 notes;
    count := count+1;
    "if" count "ge" 25 "then" "begin"
	"print" {{L}}; count := 0
    "end" if;
    punch(3);
    "goto" NextNote;

    "comment" Put halt sequence at end of tape;
EndTune:
    "print" punch(1), {{LB20}};
    "print" {{L2}Lowest note: };
    i := min*3-2; outstring(name, i);
    "print" sameline, {.{L}Highest note: };
     i := max*3-2; outstring(name, i);
    "print" {.{L}Longest duration:}, sameline, long, {.{L2}}
"end"

{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{:}{;}{<}{=}{>}{?}{{U}}

        rest    900     {[}
        F$      500     {F$} 
        G       256     {G}   
        G$      215     {G$}
	A	197	{H}
	A$	180	{H$}
	B	172	{I}
	C	164	{J}
	C$	136	{J$}
	D	124	{K}
	D$	112	{K$}
	E	106	{L}
	F	101	{M}
	F$	95	{M$}
	G	90	{N}
	G$	83	{N$}
	A^	75	{O}
	A$^	65	{O$}
	B^	57	{P}
	C^	50	{Q}
	C$^	44	{Q$}
	D^	38	{R}
	D$^	33	{R$}
	E^	3	{S}
	F^	2	{T}
	F$^	1	{T$}  (guess - used in Auld Lang Syne)
        F$^     0       {T$}  (guess)
		-1

<! halt !>

    

