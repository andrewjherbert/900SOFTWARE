translate;
"begin"

"comment" Program to translate music tapes from MAESTRO to AJHMUSIC;

    "integer" "array" digit[0:33], note[1:45], duration[1:45], name[1:135];
    "integer" lo, hi, mid, i, j, lastf, freq, dur, notes, names, count, transp;
    "integer" min, max, long, new;
    "real" r;

    "comment"
	digit is used to hold strings for duration 'digits' 0, 1, 2, ..., @.
	    N.B. two words per digit to handle {{U}} for @.
        note is used to hold shift count of each note.
        duration is used to hold number of cycle count for one second of note playout.
        name is used to hold textual name of note as 3 word string.
        lo, mid, hi are used in binary search: mid is index of note at end of search.
        i, j are used as integer workspace.
  	lastf is used to record last cycle countread to ensure input in descending order.
    	freq, dur are used to hold input cycle count and duration.
        notes, names are used to inde next free slot in note and name respectively.
	count is used to output a newline after every 20 notes output.
        transp is used to transpose the output up or down by n semitones.
        min and max are used to record lowest and highest notes translated.
        long records longest duration translated;

    "comment" Diagnostic output to teleprinter;
    punch(3);

    "comment" Read in table of digits;
    "print" {{L2}Reading table of digits.{L2}};
    "for" i := 0 "step" 1 "until" 16 "do" "begin"
    	"integer" j; j := i+i; instring(digit, j)
    "end" for;

    "comment" Read in translation table.
	Consists of a sequence of triples f s d where:
	f is a integer note shift count, The sequence is terminated if d is negative.
	s is a string containing the textual form of the note, e.g., {A}.
    	d is a positive integer note count for one second of play.
	The sequence must be in descending order of f values.;

    "comment" initialize variables;
    notes := names := 1; lastf := min := 131071; count := long := max := 0;

    "print" {{L2}Reading translation table.{L2}};

    "comment" read in next triple of translation table;
ReadTable:
    "read" freq; 
    "if" freq "ge" lastf "then" "begin"
	"print" {{L3}Translation table not in descending order.{L3}}; stop;
    "end" if;
    lastf := freq;
    "if" notes > 45 "then" "begin"
	"print" {{L3}Translation table full{L3}}; stop
    "end" if;
    note[notes] := freq; 
    i := names; instring(name,i);
    "read" duration[notes];
    "if" duration[notes] < 0 "then" "goto" ReadTransp;
    notes := notes+1; names := names+3;
    "goto" ReadTable;

    "comment" Read transposition;
ReadTransp:
    "print" {{L2}Load transposition tape and jump to 9.{L2}};
    wait;
    "read" transp;
    "print" {{L2}Transpose by}, sameline, transp, { semitones.{L2}};
   
    "comment" Translate tune;
ReadTune:
    "print" {{L2}Load tune tape and jump to 9.{L2}};
    wait;

    "comment" AJHMUSIC requires an initial newline;
    "print" punch(1), {{L}};

NextNote:
    "read" freq; "if" freq < 0 "then" "goto" EndTune;
    "read" dur;

    "comment" Binary search for the note;
    	lo := 1; hi := notes-1;
Search:  
    "if" lo > hi "then" "begin"
	mid := lo; "goto" NotFound
    "end";
    mid := (lo+hi)"div"2;
    "if" note[mid] = freq "then" "goto" Found;
    "if" note[mid] > freq "then" 
        lo := mid+1
    "else"
	hi := mid-1;
    "goto" Search;

    "comment" Here if input not not defined;
NotFound:
    "print" {{L3}Note }, freq, { not defined.{L3}};
    stop;

    "comment" Convert to TJF notation and punch to tape;
Found:
    new := mid+transp;

    "comment" Update min and max notes;
    "if" new < min "then"
	min := new
    "else" "if" new > max "then"
	max := new;

    "if" new < 1 "then" "begin"
	"print" punch(3), {{L3}Transposition takes}, sameline, freq, 
				{ below available notes.{L3}};
        stop
        "end"
    "else" "if" new > notes "then" "begin"
	"print" punch(3), {{L3}Transposition takes}, sameline, freq, 
				{ above available notes.{L3}};
        stop
        "end";

    punch(1);

    "comment" Punch note name;
    i := new*3-2; outstring(name,i);

    "comment" Calculate duration of note;
    i := dur/duration[mid]*100.0+0.5; i:=i"div"9;

    "comment" Check duration is within range permitted;
    "if" i "le" 0 "then" "begin"
	"print" punch(3), {{L3}Duration too short in:}, sameline, freq, 
			  dur, {{L3}}; stop
    "end" if;
    "if" i > 16 "then" "begin"
	"print" punch(3), {{L3}Duration too long in:}, sameline, freq, 
			  dur, {{L3}}; stop
    "end" if;

    "comment" Update long if appropriate;
    "if" i > long "then" long := i;

    "comment" Punch duration symbol;
    i := i+i; outstring(digit,i);

    "comment" Insert a new line every 25 notes;
    count := count+1;
    "if" count "ge" 25 "then" "begin"
	"print" {{L}}; count := 0
    "end" if;
    punch(3);
    "goto" NextNote;

    "comment" Put halt sequence at end of tape;
EndTune:
    "print" punch(1), {{LB20}};
    "print" {{L2}Lowest note: };
    i := min*3-2; outstring(name, i);
    "print" sameline, {.{L}Highest note: };
     i := max*3-2; outstring(name, i);
    "print" {.{L}Longest duration:}, sameline, long, {.{L2}}
"end"

{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{:}{;}{<}{=}{>}{?}{{U}}

 	245 	{C}			1390
	226	{C$}			1560
	181	{D}			1790
	160	{D$}			1960
	141	{E}			2170
	127	{F}			2380
	115	{F$}			2560
	104	{G}			2780
	92	{G$}			3030
	81	{H}			3330
	74	{H$}			3570
	67	{I}			3850
	61	{J}			4000
	51	{J$}			4540
	45	{K}			5000
	40	{K$}			5260
	36	{L}			5560
	31	{M}			5880
	27	{M$}			6250
	23	{N}			6670
	19	{N$}			7140
	16	{O}			7700
	13	{O$}			8300
	10	{P}			9090
	7	{Q}			9090
	4	{Q$}			10000
	2	{R}			10000
	0	{R$}			11100
	-1	{S}			0
	-2	{T}			0
	-3	{T$}			0
	-4	{U}			0
	-5	{U$}			0
	-6	{V}			0
	-7	{V$}			0
	-8	{W}			0
	-9	{X}			0
	-10	{X$}			0
	-11	{Y}			0
	-12	{Y$}			0
	-13	{Z}			0
	-14	{Z$}			-1
<! halt !>

    

