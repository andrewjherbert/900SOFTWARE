
 	('ALGEBRA')
 	(ALGEBRA PROGRAM  APR 9 1973)

 	(Minor edits by Andrew Herbert 3 August 2015)
 	(To make compatible with Elliott MASIR)


 	(VARIABLES DESCRIBING THE CURRENT SYMBOL)
 	(SET BY GETSYM ROUTINE)

 	IDPT +0
 	IDLEN +0
 	ENDSPT +0

 	(MISCELLANEOUS TEMPORARIES)

 	PARNM +0
 	TEMPT +0
 	DICTPT +0
 	VALUE +0
 	NUOPPT +0
 	TEMP +0
 	TEM1PT +0
 	TEM2PT +0
 	TYPE +0
 	COUNT +0

 	(POINTERS TO FSTACK, BSTACK AND TEMPSTACK)

 	FFPT +0
 	INFFPT +0
 	VALNPT +0
 	VARNPT +0
 	OPCHPT +0
 	VARVPT +0
 	LFPT +0
 	INLFPT +0
 	TSFFPT +0
 	TSTKPT +0
 	TSMXPT +0

 	(MISCELLANEOUS)

 	IBFPT +0
 	ISTABL +0
 	ISUNRY +0
 	VALCT +0
 	VARCT +0
 	SRCPT +0
 	DSTPT +0
 	LOTEMP +0







 	(FIRST ASK FOR VALUES TO BE DEFINED)

BEGIN  	4 +0
 	5 VARNPT
 	5 OPCHPT
 	5 INFFPT
 	4 FFPT
 	5 TSTKPT
 	1 +50
 	5 TSMXPT
 	5 VALNPT
 	5 FFPT
 	2 LFPT
 	7 ERLSO
9 ERLSO
ASKVAL  	4 VALNPT
 	5 FFPT
 	4 +0
 	11 STKL
8 FSTK+1
 	4 +0
5 VALCT
 	11 MESS
8 MESS+1
\VAL
\UES
\="
 	11 MDLINE
8 MDLINE+1
 	8 GIVEUP
VALOOP  	11 TSTSYM
8 TSTSYM+1
 	8 ENVAL
 	8 ERLCLA
 	8 OK1
 	8 ERLCLA
OK1  	11 TESTCH
8 TESTCH+1
 	8 OK2
 	8 OK2
 	8 ERLILL
OK2  	4 FFPT
 	1 -1
 	5 FFPT
 	11 STKSYM
8 STKSYM+1
 	4 +0
 	11 STKL
8 FSTK+1
 	10 VALCT
 	8 VALOOP

 	(END OF LIST OF VALUES)

ENVAL  	4 VALCT
 	2 +0
 	7 ERLINC
 	4 FFPT
 	5 INFFPT
 	4 LFPT
 	5 INLFPT



 	(MAIN SCANNING ROUTINE)
 	(READS A LINE AND THEN GOES TO ...)
 	(...ROUTINE TO ANALYSE STATEMENT)

NEXTLN 
        11 MESS
8 MESS+1
\: "
 	11 MDLINE
8 MDLINE+1
 	8 GIVEUP
 	11 GETSYM
8 GETSYM+1
 	8 NEXTLN
 	4 +0
5 VARNPT
 	4 INFFPT
 	5 FFPT
 	4 INLFPT
 	5 LFPT
 	4 +0
5 ISTABL
 	0 IDPT
/4 0
 	2 &600057

 	7 ;+2
8 GL1
 	0 IDPT
 	/4 1
 	2 &600060

 	7 OP
GL1  	0 IDPT
/4 0
 	2 &600064

 	7 ;+2
8 ERLSTA
 	10 IDPT
 	0 IDPT
/4 0
 	2 &600062

 	7 TABTRY
 	4 +1
 	5 ISTABL
 	0 IDPT
/4 0
 	2 &600041

 	7 TABTRY
 	8 ERLSTA



 	(PROCESSING OF OPERATOR STATEMENT)

OP  	11 TSTSYM
8 TSTSYM+1
 	8 ERLINC
 	8 ERLCLA
 	8 OPOK
 	4 TYPE
 	2 +2
 	7 ERLCLA
9 ERLCLA
OPOK  	11 CHKEND
8 CHKEND+1
 	8 ERLILL
 	4 FFPT
 	5 NUOPPT
 	4 OPCHPT
 	11 STKL
8 FSTK+1
 	11 STKSYM
8 STKSYM+1
FNUNB  	4 +0
5 ISUNRY
 	11 MESS
8 MESS+1
\UNA
\RY 
\OR 
\BIN
\ARY
\="
 	11 MDLINE
8 MDLINE+1
 	8 GIVEUP
 	11 GETSYM
8 GETSYM+1
 	8 EHUNB
 	11 CHKEND
8 CHKEND+1
 	8 EHUNB
 	0 IDPT
/4 0
 	2 &600042

 	7 ;+2
8 GL2
 	0 IDPT
 	/4 1
 	2 &600051

 	7 STKUNB
GL2  	4 +1
 	5 ISUNRY
 	0 IDPT
/4 0
 	2 &600065

 	7 ;+2
8 EHUNB
 	0 IDPT
 	/4 1
 	2 &600056

 	7 STKUNB
EHUNB  	11 MESS
8 MESS+1
\EH^
\"
 	8 FNUNB

 	(STACK UNARY OR BINARY MARKER AND FIND PRECEDENCE)

STKUNB  	4 ISUNRY
 	11 STKL
8 FSTK+1
FNPREC  	11 MESS
8 MESS+1
\PRE
\CED
\ENC
\E="
 	11 MDLINE
8 MDLINE+1
 	8 GIVEUP
 	11 GETSYM
8 GETSYM+1
 	8 EHPREC
 	11 LOGNUM
8 LOGNUM+1
 	8 EHPREC
 	11 CHKEND
8 CHKEND+1
 	8 EHPREC
 	4 VALUE
 	11 STKL
8 FSTK+1
 	8 GTVALS
EHPREC  	11 MESS
8 MESS+1
\EH^
\"
 	8 FNPREC

 	(NOW GO THROUGH ALL POSSIBLE VALUE COMBINATIONS)

GTVALS  	4 VALNPT
 	5 TEM2PT
 	5 TEM1PT
REASK  	4 ISUNRY
 	2 +0
 	7 ;+2
8 UNOPT
 	4 TEM1PT
 	11 LOQLID
8 LOQLID+1
 	11 MESS
8 MESS+1
\ "
UNOPT  	4 NUOPPT
 	1 +1
 	11 LOQLID
8 LOQLID+1
 	11 MESS
8 MESS+1
\ "
 	4 TEM2PT
 	11 LOQLID
8 LOQLID+1
 	11 MESS
8 MESS+1
\="
 	11 MDLINE
8 MDLINE+1
 	8 GIVEUP
 	11 TSTSYM
8 TSTSYM+1
 	8 EHVAL
 	8 OKVAL
 	8 EHVAL
EHVAL  	11 MESS
8 MESS+1
\EH^
\"
 	8 REASK

OKVAL  	11 CHKEND
8 CHKEND+1
 	8 EHVAL
 	4 VALUE
 	11 STKL
8 FSTK+1
 	0 TEM2PT
/4 0
 	1 TEM2PT
 	1 +1
 	
 	5 TEM2PT
 	0 TEM2PT
/4 0
 	2 +0
 	7 ;+2
8 REASK
 	4 ISUNRY
 	2 +0
 	7 ;+2
8 ENDVLS
 	4 VALNPT
 	5 TEM2PT
 	0 TEM1PT
/4 0
 	1 TEM1PT
 	1 +1
 	
 	5 TEM1PT
 	0 TEM1PT
/4 0
 	2 +0
 	7 ;+2
8 REASK

 	(SUCCESSFUL DEFINITION. NOW ADD OPERATOR TO CHAIN)

ENDVLS  	4 FFPT
 	5 INFFPT
 	4 NUOPPT
 	5 OPCHPT
 	8 NEXTLN



 	(PROCESSING OF TABLE AND TRY STATEMENTS)
 	(FIRST CONVERT EXPRESSION TO POLISH POSTFIX)
 	(ALL VARIABLE NAMES ARE STACKED END TO END)
 	(POLISH STRING IS BUILT UP ON BSTACK)

TABTRY  	4 TSTKPT
 	5 TSFFPT
 	4 FFPT
 	5 VARNPT
 	4 +0
 	11 STKL
8 FSTK+1
 	4 +0
5 VARCT


 	(STATE 1 -- EXPECTING OPERAND)

OPRAND  	11 TSTSYM
8 TSTSYM+1
 	8 ERLINC
 	8 VAL
 	8 NEW
 	0 TYPE
/8 ;+1
 	8 ERLWB
 	8 STKOP
 	8 LPAR
 	8 ERLPAR
 	8 VAR

 	(NEW VARIABLE)

NEW  	4 VARCT
 	5 VALUE
 	10 VARCT
 	4 FFPT
 	1 -1
 	5 FFPT
 	11 STKSYM
8 STKSYM+1
 	4 +0
 	11 STKL
8 FSTK+1

 	(EXISTING VARIABLE -- ADD TO POLISH STRING)

VAR  	4 +0
 	11 STKL
8 BSTK
 	4 VALUE
 	11 STKL
8 BSTK
 	8 OPRATE

 	(VALUE -- ADD TO POLISH STRING)

VAL  	4 +1
 	11 STKL
8 BSTK
 	4 VALUE
 	11 STKL
8 BSTK
 	8 OPRATE

 	(LEFT PARENTHESIS -- ADD MARKER TO TEMPSTACK)

LPAR  	4 +0
5 DICTPT

 	(UNARY OPERATOR -- ADD TO TEMPSTACK)

STKOP  	4 DICTPT
 	0 TSFFPT
/5 0
 	10 TSFFPT
 	4 TSFFPT
 	2 TSMXPT
 	7 ERLCMP
9 ERLCMP
 	8 OPRAND


 	(STATE 2 -- EXPECTING OPERATOR)

OPRATE  	11 TSTSYM
8 TSTSYM+1
 	8 ENDST
 	8 ERLVLO
 	8 ERLVRO
 	0 TYPE
/8 ;+1
 	8 BINOP
 	8 ERLWU
 	8 ERLPAR
 	8 RPAR
 	8 ERLVRO

 	(RIGHT PAREN -- MOVE OPERATORS ...)
 	(...FROM TEMPSTACK TO POLISH STRING)

RPAR  	11 GETTS
8 GETTS+1
 	8 ERLPAR
 	8 OPRATE
 	8 RPAR

 	(BINARY OPERATOR -- COMPARE PRECEDENCE WITH ...)
 	(...TOP OF TEMPSTACK UNTIL GREATER)

BINOP  	11 GETTS
8 GETTS+1
 	8 STKOP
 	8 BIN1
 	0 TSFFPT
/4 0
 	5 TEM1PT
 	0 TEM1PT
 	/4 1
 	5 LOTEMP
 	0 DICTPT
 	/4 1
 	2 LOTEMP
 	7 BINOP
2 +0
9 BINOP

 	(UNDO PREVIOUS GETTS)
 	(ADD NEW OPERATOR TO TEMPSTACK)

 	10 LFPT
10 LFPT
BIN1  	10 TSFFPT
 	8 STKOP

 	(END OF STATEMENT -- CLEAR TEMPSTACK)

ENDST  	11 GETTS
8 GETTS+1
 	8 FIN
 	8 ERLPAR
 	8 ENDST

 	(ADD END MARKER TO POLISH STRING)

FIN  	4 +3
 	11 STKL
8 BSTK

 	(NOW EVALUATE POLISH STRING)
 	(CYCLE THROUGH ALL POSSIBLE VALUES OF VARIABLES)
 	(USE TOP OF FSTACK TO STORE CURRENT SET OF VALUES)
 	(FIRST SET ALL TO ZERO)

 	4 FFPT
 	5 VARVPT
 	4 +0
5 COUNT
STLOOP  	4 COUNT
 	2 VARCT
 	7 STL1
 	4 +0
 	11 STKL
8 FSTK+1
 	10 COUNT
 	8 STLOOP

 	(INITIALIZE VALUE TO -1 [ MEANING UNDEFINED])

STL1  	4 +0
 	1 -1
 	5 VALUE
 	4 ISTABL
 	2 +0
 	7 EVAL
 	4 VARCT
 	2 +0
 	7 ERLNOV

 	(PRINT OUT TABLE HEADING)
 	11 MESS
8 MESS+1
\^"
 	4 VARNPT
 	5 TEM1PT
HDLOOP  	0 TEM1PT
/4 0
 	2 +0
 	7 ENDHD
 	4 TEM1PT
 	11 LORLID
8 LORLID+1
 	4 TEM1PT
 	11 PRTAB
8 PRTAB+1
 	0 TEM1PT
/4 0
 	1 TEM1PT
 	1 +1
 	
 	5 TEM1PT
 	8 HDLOOP

ENDHD  	11 MESS
8 MESS+1
\: V
\ALU
\E^"
 	4 +0
5 COUNT
UNDLP  	11 MESS
8 MESS+1
\---
\---
\  "
 	10 COUNT
 	4 COUNT
 	2 VARCT
 	7 ;+2
8 UNDLP
 	11 MESS
8 MESS+1
\:--
\---
\-^"

 	(NOW PRINT OUT LINE OF TABLE)

PTLINE  	4 VARVPT
 	5 TEM1PT
PLLOOP  	4 TEM1PT
 	2 FFPT
 	7 EVAL
 	0 TEM1PT
/4 0
 	11 PRVAL
8 PRVAL+1
 	4 DICTPT
 	11 PRTAB
8 PRTAB+1
 	10 TEM1PT
 	8 PLLOOP

 	(EVALUATE POLISH STRING FOR CURRENT SET OF VALUES)

EVAL  	4 INLFPT
 	1 -1
 	5 TEM1PT
EVLOOP  	0 TEM1PT
/4 0
 	5 TEMP
 	4 TEM1PT
 	1 -1
 	5 TEM1PT
 	0 TEMP
/8 ;+1
 	8 PLVAR
 	8 PLVAL
 	8 PLOP
 	8 PLEND

 	(CASE OF VARIABLE)

PLVAR  	0 TEM1PT
/4 0
 	
 	1 VARVPT
 	5 TEM2PT
 	0 TEM2PT
/4 0
 	5 TEMP
 	8 PLV1

 	(CASE OF VALUE)

PLVAL  	0 TEM1PT
/4 0
 	5 TEMP
PLV1  	4 TEM1PT
 	1 -1
 	5 TEM1PT
PLV2  	4 TEMP
 	11 STKL
8 FSTK+1
 	8 EVLOOP

 	(CASE OF OPERATOR -- APPLY TO ITEMS AT STACK TOP)

PLOP  	0 TEM1PT
/4 0
 	5 TEM2PT
 	4 TEM1PT
 	1 -1
 	5 TEM1PT
 	11 GETEMP
8 GETEMP+1
 	4 TEMP
 	
 	5 TEMP
 	1 TEM2PT
 	1 +2
 	5 DICTPT
 	0 TEM2PT
/4 0
 	2 +0
 	7 ;+2
8 PLUNOP

 	(BINARY OPERATOR -- GET LEFT OPERAND)

 	11 GETEMP
8 GETEMP+1
 	4 +0
5 COUNT
 	4 TEMP
 	
 	5 TEMP
MULLP  	4 DICTPT
 	1 TEMP
 	5 DICTPT
 	10 COUNT
 	4 COUNT
 	2 VALCT
 	7 ;+2
8 MULLP
PLUNOP  	0 DICTPT
/4 0
 	5 TEMP
 	8 PLV2

 	(END OF EVALUATION)

PLEND  	11 GETEMP
8 GETEMP+1
 	4 ISTABL
 	2 +0
 	7 ;+2
8 TABVAL
 	4 VALUE
 	2 +0
 	7 VALSET
9 VALSET

 	(FIRST SETTING OF EXPRESSION VALUE)

 	4 TEMP
 	5 VALUE
 	8 NEXVAL

 	(COMPARE CURRENT VALUE WITH PREVIOUS ONE)

VALSET  	4 TEMP
 	2 VALUE
 	7 NEXVAL
 	11 MESS
8 MESS+1
\IS 
\A C
\ONT
\ING
\ENC
\Y^^
\"
 	8 NEXTLN

 	(CASE OF TABLE -- PRINT VALUE)

TABVAL  	11 MESS
8 MESS+1
\: "
 	4 TEMP
 	11 PRVAL
8 PRVAL+1
 	11 MESS
8 MESS+1
\^"

 	(PROCEED TO NEXT SET OF VALUES)

NEXVAL  	4 FFPT
 	5 TEM1PT
NXLOOP  	4 TEM1PT
 	2 VARVPT
 	7 COMPLT
 	4 TEM1PT
 	1 -1
 	5 TEM1PT
 	0 TEM1PT
/4 0
 	1 +1
 	0 TEM1PT
/5 0
 	0 TEM1PT
/4 0
 	2 VALCT
 	7 ;+2
8 NX1
 	4 +0
 	0 TEM1PT
/5 0
 	8 NXLOOP
NX1  	4 ISTABL
 	2 +0
 	7 EVAL
 	8 PTLINE

 	(CASE WHERE EVALUATION IS COMPLETE)

COMPLT  	4 ISTABL
 	2 +0
 	7 ;+2
8 COMTAB
 	11 MESS
8 MESS+1
\= "
 	4 VALUE
 	11 PRVAL
8 PRVAL+1
 	11 MESS
8 MESS+1
\^"
COMTAB  	11 MESS
8 MESS+1
\^"
 	8 NEXTLN








 	CHKEND +0



 	(HAS 2 EXITS AND NO PARAMETER)
 	(CHECKS IF IBFPT IS AT THE END OF INPUT BUFFER)
 	(IF NOT USES EXIT 1)
 	(IF SO USES EXIT 2)

CREDO  	11 TESTCH
8 TESTCH+1
 	8 CHKOK
 	8 CREDO
 	0 CHKEND
/8 1
CHKOK  	0 CHKEND
/8 2




 	CMPARE +0
5 PARNM


 	(HAS 2 EXITS AND A POINTER PARAMETER)
 	(COMPARES CURRENT SYMBOL WITH LID ...)
 	(...POINTED AT BY PARAMETER)
 	(IF A MATCH USES EXIT 1, OHERWISE USES EXIT 2)

 	4 IDLEN
 	0 PARNM
/2 0
 	7 GL4
 	0 CMPARE
/8 2
GL4  	4 IDPT
 	5 TEMPT
 	10 PARNM
CMLOOP  	4 TEMPT
 	2 ENDSPT
 	7 ;+2
8 GL5
 	0 CMPARE
/8 1
GL5  	0 TEMPT
/4 0
 	0 PARNM
/2 0
 	7 GL6
 	0 CMPARE
/8 2
GL6  	10 TEMPT
 	10 PARNM
 	8 CMLOOP




 	CMPLST +0
5 PARNM


 	(HAS 2 EXITS AND A POINTER PARAMETER)
 	(PARAMATER POINTS AT LIST OF LIDS - END TO END)
 	(LIST IS TERMINATED BY ZERO LENGTH)
 	(CURRENT SYMBOL IS COMPARED WITH THE LIST)
 	(USES EXIT 2 IF NO MATCH)
 	(ELSE USES EXIT 1 AND SETS VALUE=0 IF MATCH ...)
 	(...IS FIRST LID, =1 IF SECOND, ETC.)

 	4 +0
5 VALUE
 	4 PARNM
 	5 DICTPT
CTLOOP  	0 DICTPT
/4 0
 	2 +0
 	7 ;+2
8 GL7
 	0 CMPLST
/8 2
GL7  	4 DICTPT
 	11 CMPARE
8 CMPARE+1
 	8 GOTIT
 	10 VALUE
 	0 DICTPT
/4 0
 	1 DICTPT
 	1 +1
 	
 	5 DICTPT
 	8 CTLOOP

GOTIT  	0 CMPLST
/8 1




 	GETSYM +0



 	(HAS 2 EXITS AND NO PARAMETERS)
 	(GETS A SYMBOL FROM THE INPUT BUFFER)
 	(IGNORES ANY SEPARATORS AT THE START)
 	(USES EXIT 1 IF TERMINATOR IS FOUND)
 	(ELSE USES EXIT 2 AND SETS VARIABLES AS FOLLOWS)
 	(SETS IDPT TO POINT AT FIRST CHARACTER OF SYMBOL)
 	(SETS ENDSPT TO POINT BEYOND LAST CHAR OF SYMBOL)
 	(SETS IDLEN AS LENGTH OF SYMBOL)

REDO  	4 IBFPT
 	5 IDPT
 	0 IDPT
/4 0
 	6 &100000
7 ;+2
8 ISPUNC
GTLOOP  	10 IBFPT
 	0 IBFPT
/4 0
 	6 &100000
7 ;+2
8 ENDSYM
 	8 GTLOOP

ISPUNC  	11 TESTCH
8 TESTCH+1
 	8 GTEXIT
 	8 REDO
ENDSYM  	4 IBFPT
 	5 ENDSPT
 	2 IDPT
2 +0
 	5 IDLEN
 	0 GETSYM
/8 2

GTEXIT  	0 GETSYM
/8 1




 	GETEMP +0



 	(HAS 1 EXIT AND NO PARAMETER)
 	(UNSTACKS NUMBER FROM FSTACK AND PUTS IT IN TEMP)

 	4 FFPT
 	1 -1
 	5 FFPT
 	0 FFPT
/4 0
 	5 TEMP
 	0 GETEMP
/8 1




 	GETTS +0



 	(HAS 3 EXITS AND NO PARAMETER)
 	(UNSTACKS POINTER FROM TOP OF TEMPORARY STACK)
 	(IF STACK EMPTY USES EXIT1)
 	(IF POINTER IS NULL [MEANING LEFT PAREN] USES ...)
 	(EXIT 2. ELSE ADDS POINTER TO ...)
 	(...POLISH STRING AND USES EXIT 3)

 	4 TSFFPT
 	2 TSTKPT
 	7 ;+2
8 GL8
 	0 GETTS
/8 1
GL8  	4 TSFFPT
 	1 -1
 	5 TSFFPT
 	0 TSFFPT
/4 0
 	2 +0
 	7 ;+2
8 GL9
 	0 GETTS
/8 2
GL9  	4 +2
 	11 STKL
8 BSTK
 	0 TSFFPT
/4 0
 	11 STKL
8 BSTK
 	0 GETTS
/8 3




 	PRTAB +0
5 PARNM


 	(HAS 1 EXIT AND POINTER PARAMETER)
 	(PARAM POINTS AT LID THAT HAS JUST BEEN PRINTED)
 	(PRINTS ENOUGH SPACES TO GIVE AN 8-COLUMN TAB)

 	0 PARNM
/4 0
 	5 TEMP
 	11 MESS
8 MESS+1
\  "
PRTLP  	4 TEMP
 	2 +6
 	2 +0
9 GL10
 	0 PRTAB
/8 1
GL10  	10 TEMP
 	11 MESS
8 MESS+1
\ "
 	8 PRTLP




 	PRVAL +0
5 PARNM


 	(HAS 1 EXIT AND NUMERICAL PARAMETER)
 	(PRINTS NAME OF N-TH VALUE ...)
 	(...WHERE N+1 IS VALUE OF PARAMETER)

 	4 VALNPT
 	5 DICTPT
PRVLP  	4 PARNM
 	2 +0
 	7 NMFND
 	4 PARNM
 	1 -1
 	5 PARNM
 	0 DICTPT
/4 0
 	1 DICTPT
 	1 +1
 	
 	5 DICTPT
 	8 PRVLP

NMFND  	4 DICTPT
 	11 LORLID
8 LORLID+1
 	0 PRVAL
/8 1




 	STKSYM +0



 	(HAS 1 EXIT AND NO PARAMETERS)
 	(STACKS CURRENT SYMBOL ON FORWARDS STACK)

 	4 IDLEN
 	11 STKL
8 FSTK+1
 	4 FFPT
 	5 TEM2PT
 	1 IDLEN
 	
 	5 FFPT
 	2 LFPT
 	7 ERLSO
9 ERLSO
 	4 IDPT
 	5 SRCPT
 	4 TEM2PT
 	5 DSTPT
 	4 IDLEN
 	11 STKL
8 FMOVE
 	0 STKSYM
/8 1




 	TESTCH +0



 	(HAS 3 EXITS AND NO PARAMETERS)
 	(GETS AND CLASSIFIES NEXT INPUT CHARACTER)
 	(IF A TERMINATOR USES EXIT 1)
 	(IF A SEPARATOR ADVANCES IBFPT AND USES EXIT 2)
 	(OTHERWISE ADVANCES IBFPT AND USES EXIT 3)


 	0 IBFPT
/4 0
 	2 &500033

 	7 TS1
 	0 IBFPT
/4 0
 	2 &500001
 	7 TS1
 	0 IBFPT
/4 0
 	2 &500000
 	7 TS2
 	0 IBFPT
/4 0
 	2 &500014

 	7 TS2
 	0 IBFPT
/4 0
 	2 TABCD
 	7 TS2
 	10 IBFPT
 	0 TESTCH
/8 3

TS1  	0 TESTCH
/8 1

TS2  	10 IBFPT
 	0 TESTCH
/8 2




 	TSTSYM +0



 	(HAS 4 EXITS AND NO PARAMETER)
 	(GETS AND CLASSIFIES NEXT INPUT SYMBOL)
 	(USES EXIT 1 IF TERMINATOR IS FOUND)
 	(USES EXIT 2 IF SYMBOL IS A VALUE)
 	(USES EXIT 3 IF SYMBOL IS UNDEFINED)
 	(OHERWISE USES EXIT 4 AND SETS TYPE AS FOLLOWS)
 	(TYPE=0 MEANS SYMBOL IS A BINARY OPERATOR)
 	(TYPE=1 MEANS SYMBOL IS A UNARY OPERATOR)
 	(TYPE=2 MEANS SYMBOL IS A LEFT PARENTHESIS)
 	(TYPE=3 MEANS SYMBOL IS A RIGHT PARENTHESIS)
 	(TYPE=4 MEANS SYMBOL IS UNDEFINED)
 	(IF SYMBOL IS A VARIABLE OR VALUE THEN VALUE ...)
 	(...IS SET AS FOR CMPLST. IF SYMBOL IS AN ...)
 	(...OPERATOR THEN DICTPT IS SET TO POINT ...)
 	(...AT THE INFORMATION AFTER ITS LID)

 	11 GETSYM
8 GETSYM+1
 	8 NOSYM
 	4 +2
 	5 TYPE
 	0 IDPT
/4 0
 	2 &500010

 	7 USE4
 	4 +3
 	5 TYPE
 	0 IDPT
/4 0
 	2 &500011

 	7 USE4
 	4 VALNPT
 	11 CMPLST
8 CMPLST+1
 	8 ISVAL
 	4 +4
 	5 TYPE
 	4 VARNPT
 	2 +0
 	7 GL11
 	4 VARNPT
 	11 CMPLST
8 CMPLST+1
 	8 USE4
GL11  	4 OPCHPT
 	5 DICTPT
OPLOOP  	4 DICTPT
 	2 +0
 	7 ;+2
8 GL12
 	0 TSTSYM
/8 3
GL12  	4 DICTPT
 	1 +1
 	11 CMPARE
8 CMPARE+1
 	8 ISOP
 	0 DICTPT
/4 0
 	5 DICTPT
 	8 OPLOOP

 	(CASE OF OPERATOR)

ISOP  	10 DICTPT
 	0 DICTPT
/4 0
 	1 DICTPT
 	1 +1
 	
 	5 DICTPT
 	0 DICTPT
/4 0
 	5 TYPE
USE4  	0 TSTSYM
/8 4

NOSYM  	0 TSTSYM
/8 1
ISVAL  	0 TSTSYM
/8 2








ERLSYS  	11 MESS
8 MESS+1
\SOF
\TWA
\RE 
\ERR
\OR^
\"
GIVEUP  	11 MDQUIT
8 MDQUIT+1

ERLCLA  	11 MESS
8 MESS+1
\ERR
\OR 
\-- 
\CLA
\SHI
\NG 
\USE
\ OF
\ SY
\MBO
\L^"
 	8 ERLCOM

ERLSO  	11 MESS
8 MESS+1
\^ER
\ROR
\ --
\ IN
\SUF
\FIC
\IEN
\T W
\ORK
\SPA
\CE^
\"
 	8 GIVEUP

ERLILL  	11 MESS
8 MESS+1
\ERR
\OR 
\-- 
\ILL
\EGA
\L S
\YMB
\OL^
\"
 	8 ERLCOM

ERLSTA  	11 MESS
8 MESS+1
\ERR
\OR 
\-- 
\UNR
\ECO
\GNI
\ZED
\ ST
\ATE
\MEN
\T^"
 	8 ERLCOM

ERLINC  	11 MESS
8 MESS+1
\ERR
\OR 
\-- 
\INC
\OMP
\LET
\E L
\INE
\^"
 	8 ERLCOM

ERLNOV  	11 MESS
8 MESS+1
\ERR
\OR 
\-- 
\NO 
\VAR
\IAB
\LES
\^"
 	8 ERLCOM

ERLPAR  	11 MESS
8 MESS+1
\ERR
\OR 
\IN 
\USE
\ OF
\ PA
\REN
\THE
\SES
\^"
 	8 ERLCOM

ERLCMP  	11 MESS
8 MESS+1
\ERR
\OR 
\-- 
\EXP
\RES
\SIO
\N T
\OO 
\COM
\PLI
\CAT
\ED^
\"
 	8 ERLCOM

ERLWB  	11 MESS
8 MESS+1
\ERR
\OR 
\IN 
\USE
\ OF
\ BI
\NAR
\Y O
\PER
\ATO
\R "
 	8 ERLNAM

ERLWU  	11 MESS
8 MESS+1
\ERR
\OR 
\IN 
\USE
\ OF
\ UN
\ARY
\ OP
\ERA
\TOR
\ "
 	8 ERLNAM
ERLVRO  	11 MESS
8 MESS+1
\ERR
\OR 
\IN 
\USE
\ OF
\ VA
\RIA
\BLE
\ "
 	8 ERLNAM

ERLVLO  	11 MESS
8 MESS+1
\ERR
\OR 
\IN 
\USE
\ OF
\ VA
\LUE
\ "

 	(PRINT NAME OF OFFENDING SYMBOL)

ERLNAM  	4 FFPT
 	5 TEM1PT
 	11 STKSYM
8 STKSYM+1
 	4 TEM1PT
 	11 LOELID
8 LOELID+1
 	11 MESS
8 MESS+1
\^"

 	(COMMON ACTION AFTER ERROR)

ERLCOM  	4 INFFPT
 	2 +0
 	7 ASKVAL
 	8 NEXTLN


 	(SPECIAL ADDITIONAL CODE FOR LOWL ALGEBRA)


 	LOGNUM +0



 	(PERFORMS CHARACTER TO NUMERICAL CONVERSION)
 	4 +0
5 VALUE
 	4 IDPT
 	1 +3
 	2 ENDSPT
 	2 +0
9 NUMEX
NUMLP  	0 IDPT
/4 0
 	9 NUMEX
 	5 TEMP
 	4 VALUE
 	12 +10
14 17
 	1 TEMP
 	5 VALUE
 	10 IDPT
 	4 IDPT
 	2 ENDSPT
 	7 ;+2
8 NUMLP
 	0 LOGNUM
/8 2

NUMEX  	0 LOGNUM
/8 1


 	LOELID +0
5 PARNM

 	(OUTPUTS A LID ON THE ERROR STREAM)

 	0 PARNM
/4 0
 	1 PARNM
 	1 +1
 	5 LOTEMP
 	10 PARNM
LOELP  	4 PARNM
 	2 LOTEMP
 	7 LOEEX
 	0 PARNM
/4 0
 	11 MDOUCH
8 MDERCH
 	10 PARNM
 	8 LOELP

LOEEX  	0 LOELID
/8 1


 	LORLID +0
5 PARNM

 	(OUTPUTS A LID ON RESULTS STREAM)

 	0 PARNM
/4 0
 	5 LOTEMP
 	2 +6
 	7 NOTRUN
2 +0
9 NOTRUN
 	4 +6
 	5 LOTEMP
NOTRUN  	4 LOTEMP
 	1 PARNM
 	1 +1
 	5 LOTEMP
 	10 PARNM
LORLP  	4 PARNM
 	2 LOTEMP
 	7 LOREX
 	0 PARNM
/4 0
 	11 MDRCH
8 MDRCH+1
 	10 PARNM
 	8 LORLP

LOREX  	0 LORLID
/8 1


 	LOQLID +0
5 PARNM

 	(OUTPUTS A LID ON QUESTION STREAM)

 	0 PARNM
/4 0
 	1 PARNM
 	1 +1
 	5 LOTEMP
 	10 PARNM
LOQLP  	4 PARNM
 	2 LOTEMP
 	7 LOQEX
 	0 PARNM
/4 0
 	11 MDQCH
8 MDQCH+1
 	10 PARNM
 	8 LOQLP

LOQEX  	0 LOQLID
/8 1

 	

%

<! Halt !>